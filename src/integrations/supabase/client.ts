
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xjsjknmyocyihutrhsyg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhqc2prbm15b2N5aWh1dHJoc3lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwODkyNzcsImV4cCI6MjA1NzY2NTI3N30.pHPCymZBzaiSYHoNlEjiGI1cbNmJNgMNu8Q7a7MNdMM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to create a public storage bucket
export const createPublicBucket = async (bucketName: string) => {
  try {
    // First check if bucket exists
    const { data: existingBuckets, error: listError } = await supabase
      .storage
      .listBuckets();
    
    if (listError) {
      console.error("Error checking buckets:", listError);
      return { error: true, message: "Failed to check existing buckets", partial: true };
    }
    
    // Check if our bucket already exists
    const bucketExists = existingBuckets.some(bucket => bucket.name === bucketName);
    
    if (!bucketExists) {
      // Create the bucket if it doesn't exist
      const { error: createError } = await supabase
        .storage
        .createBucket(bucketName, {
          public: true,
          fileSizeLimit: 5242880, // 5MB limit
        });
      
      if (createError) {
        console.error("Error creating bucket:", createError);
        return { error: true, message: "Failed to create bucket", partial: true };
      }
    }
    
    // Update bucket to be public
    const { error: updateError } = await supabase
      .storage
      .updateBucket(bucketName, {
        public: true,
      });
    
    if (updateError) {
      console.error("Error updating bucket:", updateError);
      return { error: true, message: "Failed to make bucket public", partial: true };
    }
    
    return { success: true, message: "Bucket configured successfully" };
  } catch (error) {
    console.error("Unexpected error in createPublicBucket:", error);
    return { error: true, message: "Unexpected error in bucket configuration", partial: true };
  }
};
