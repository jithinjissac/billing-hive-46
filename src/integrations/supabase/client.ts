
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xjsjknmyocyihutrhsyg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhqc2prbm15b2N5aWh1dHJoc3lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwODkyNzcsImV4cCI6MjA1NzY2NTI3N30.pHPCymZBzaiSYHoNlEjiGI1cbNmJNgMNu8Q7a7MNdMM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to create a public bucket via edge function
export const createPublicBucket = async (bucketName: string) => {
  try {
    console.log(`Attempting to create public bucket: ${bucketName}`);
    
    // First try to create the bucket directly using the client
    try {
      const { data: existingBuckets, error: listError } = await supabase.storage.listBuckets();
      
      if (!listError) {
        const bucketExists = existingBuckets?.some(b => b.name === bucketName);
        
        if (!bucketExists) {
          console.log(`Bucket ${bucketName} doesn't exist, creating it...`);
          const { data, error } = await supabase.storage.createBucket(bucketName, {
            public: true,
            fileSizeLimit: 5242880,
            allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
          });
          
          if (!error) {
            console.log(`Successfully created bucket ${bucketName} directly`);
            return { success: true, message: `Bucket ${bucketName} created directly` };
          }
        } else {
          console.log(`Bucket ${bucketName} already exists`);
          return { success: true, message: `Bucket ${bucketName} already exists` };
        }
      }
    } catch (directError) {
      console.log('Error creating bucket directly, will try with edge function:', directError);
    }
    
    // If direct creation fails, use the edge function as a fallback
    console.log(`Falling back to edge function for creating bucket: ${bucketName}`);
    const { data, error } = await supabase.functions.invoke('create-storage-bucket', {
      body: { bucketName }
    });
    
    if (error) {
      console.error('Error invoking create-storage-bucket function:', error);
      throw error;
    }
    
    console.log('Bucket creation response from edge function:', data);
    return data;
  } catch (error) {
    console.error('Failed to create public bucket:', error);
    throw error;
  }
};
