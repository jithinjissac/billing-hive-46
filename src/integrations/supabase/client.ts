
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xjsjknmyocyihutrhsyg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhqc2prbm15b2N5aWh1dHJoc3lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwODkyNzcsImV4cCI6MjA1NzY2NTI3N30.pHPCymZBzaiSYHoNlEjiGI1cbNmJNgMNu8Q7a7MNdMM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to create a public bucket via edge function
export const createPublicBucket = async (bucketName: string) => {
  try {
    console.log(`Attempting to create/configure public bucket: ${bucketName}`);
    
    // Use edge function to ensure bucket is public and RLS is disabled
    console.log(`Using edge function to ensure bucket ${bucketName} is public...`);
    const { data, error } = await supabase.functions.invoke('create-storage-bucket', {
      body: { bucketName }
    });
    
    if (error) {
      console.error('Error invoking create-storage-bucket function:', error);
      throw error;
    }
    
    console.log('Bucket configuration response from edge function:', data);
    
    // Add delay to allow policies to propagate
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Try fallback direct bucket operations if edge function doesn't report success
    if (!data || !data.rls_disabled) {
      console.log("Edge function may not have fully configured the bucket, trying direct operations");
      
      // Try to ensure bucket exists
      try {
        const { data: listData, error: listError } = await supabase.storage.listBuckets();
        
        if (!listError) {
          const exists = listData?.some(b => b.name === bucketName);
          
          if (!exists) {
            console.log(`Bucket ${bucketName} not found, attempting to create directly`);
            await supabase.storage.createBucket(bucketName, {
              public: true,
              fileSizeLimit: 5242880,
              allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
            });
          } else {
            console.log(`Bucket ${bucketName} found, updating settings directly`);
            await supabase.storage.updateBucket(bucketName, {
              public: true,
              fileSizeLimit: 5242880,
              allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
            });
          }
        }
      } catch (directError) {
        console.error("Error with direct bucket operations:", directError);
        // Continue anyway, the edge function might have succeeded partially
      }
    }
    
    return data || { success: true, message: `Bucket ${bucketName} configured` };
  } catch (error) {
    console.error('Failed to create/update public bucket:', error);
    // Return a partial success to prevent blocking the user experience
    return { 
      partial: true, 
      message: "Bucket may have been partially configured. Some operations might not work correctly."
    };
  }
};
