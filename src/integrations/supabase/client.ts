
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xjsjknmyocyihutrhsyg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhqc2prbm15b2N5aWh1dHJoc3lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwODkyNzcsImV4cCI6MjA1NzY2NTI3N30.pHPCymZBzaiSYHoNlEjiGI1cbNmJNgMNu8Q7a7MNdMM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define a custom storage interface to work with Supabase's Storage API
const customStorage = {
  getItem: (key: string): string | null => {
    try {
      const value = localStorage.getItem(key);
      console.log(`Retrieved key from storage: ${key.substring(0, 10)}...`);
      return value;
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      localStorage.setItem(key, value);
      console.log(`Stored key in storage: ${key.substring(0, 10)}...`);
    } catch (error) {
      console.error('Error setting localStorage:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      localStorage.removeItem(key);
      console.log(`Removed key from storage: ${key.substring(0, 10)}...`);
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  }
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'techiuspay-auth-token',
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: customStorage
  },
  global: {
    // Set timeouts for requests to avoid hanging
    fetch: (url, options) => {
      const timeoutController = new AbortController();
      const timeoutId = setTimeout(() => timeoutController.abort(), 10000); // 10s timeout
      
      return fetch(url, {
        ...options,
        signal: timeoutController.signal
      }).finally(() => {
        clearTimeout(timeoutId);
      });
    }
  }
});

// Helper function to create a public bucket for profile pictures
export const createPublicBucket = async (bucketName: string) => {
  try {
    // First check if bucket exists
    const { data: existingBuckets } = await supabase.storage.listBuckets();
    const bucketExists = existingBuckets?.some(bucket => bucket.name === bucketName);
    
    if (bucketExists) {
      console.log(`Bucket ${bucketName} already exists`);
      return { success: true, message: "Bucket already exists", partial: false };
    }

    // Create bucket if it doesn't exist
    const { error: createError } = await supabase.storage.createBucket(bucketName, {
      public: true,
      fileSizeLimit: 5242880, // 5MB
    });
    
    if (createError) {
      console.error("Error creating bucket:", createError);
      return { error: true, message: createError.message, partial: true };
    }
    
    return { success: true, message: "Bucket created successfully", partial: false };
  } catch (error) {
    console.error("Error in createPublicBucket:", error);
    return { error: true, message: String(error), partial: true };
  }
};

// Add function to clear Supabase cache
export const clearSupabaseCache = () => {
  try {
    // Try to clear any cached auth data
    const storageKey = 'techiuspay-auth-token';
    const authData = localStorage.getItem(storageKey);
    
    if (authData) {
      // Store temporary backup for recovery if needed
      localStorage.setItem(`${storageKey}-backup`, authData);
      console.log('Created backup of auth data before clearing');
      
      // Remove the actual auth data
      localStorage.removeItem(storageKey);
      console.log('Cleared Supabase auth cache');
    }
    
    // Clear other potential caches
    sessionStorage.removeItem('sb-refresh-token');
    sessionStorage.removeItem('sb-access-token');
    
    return true;
  } catch (error) {
    console.error('Failed to clear Supabase cache:', error);
    return false;
  }
};

// Add function to recover from auth data backup if available
export const recoverAuthData = () => {
  try {
    const storageKey = 'techiuspay-auth-token';
    const backupKey = `${storageKey}-backup`;
    const backupData = localStorage.getItem(backupKey);
    
    if (backupData) {
      console.log('Found auth data backup, attempting recovery');
      localStorage.setItem(storageKey, backupData);
      localStorage.removeItem(backupKey);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Failed to recover auth data:', error);
    return false;
  }
};
